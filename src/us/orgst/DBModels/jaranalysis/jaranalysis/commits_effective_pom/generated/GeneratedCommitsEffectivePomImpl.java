package us.orgst.DBModels.jaranalysis.jaranalysis.commits_effective_pom.generated;

import com.speedment.common.annotation.GeneratedCode;
import us.orgst.DBModels.jaranalysis.jaranalysis.commits_effective_pom.CommitsEffectivePom;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.commits_effective_pom.CommitsEffectivePom}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCommitsEffectivePomImpl implements CommitsEffectivePom {
    
    private String sha;
    private boolean effectivePom;
    
    protected GeneratedCommitsEffectivePomImpl() {}
    
    @Override
    public String getSha() {
        return sha;
    }
    
    @Override
    public boolean getEffectivePom() {
        return effectivePom;
    }
    
    @Override
    public CommitsEffectivePom setSha(String sha) {
        this.sha = sha;
        return this;
    }
    
    @Override
    public CommitsEffectivePom setEffectivePom(boolean effectivePom) {
        this.effectivePom = effectivePom;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("sha = "          + Objects.toString(getSha()));
        sj.add("effectivePom = " + Objects.toString(getEffectivePom()));
        return "CommitsEffectivePomImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof CommitsEffectivePom)) { return false; }
        final CommitsEffectivePom thatCommitsEffectivePom = (CommitsEffectivePom)that;
        if (!Objects.equals(this.getSha(), thatCommitsEffectivePom.getSha())) { return false; }
        if (this.getEffectivePom() != thatCommitsEffectivePom.getEffectivePom()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getSha());
        hash = 31 * hash + Boolean.hashCode(getEffectivePom());
        return hash;
    }
}