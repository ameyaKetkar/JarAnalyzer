package us.orgst.DBModels.jaranalysis.jaranalysis.projects.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import us.orgst.DBModels.jaranalysis.jaranalysis.projects.Projects;

import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.projects.Projects}-interface
 * representing entities of the {@code projects}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedProjects {
    
    /**
     * This Field corresponds to the {@link Projects} field that can be obtained
     * using the {@link Projects#getId()} method.
     */
    IntField<Projects, Integer> ID = IntField.create(
        Identifier.ID,
        Projects::getId,
        Projects::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Projects} field that can be obtained
     * using the {@link Projects#getName()} method.
     */
    StringField<Projects, String> NAME = StringField.create(
        Identifier.NAME,
        Projects::getName,
        Projects::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Projects} field that can be obtained
     * using the {@link Projects#getGitCloneLink()} method.
     */
    StringField<Projects, String> GIT_CLONE_LINK = StringField.create(
        Identifier.GIT_CLONE_LINK,
        Projects::getGitCloneLink,
        Projects::setGitCloneLink,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Projects} field that can be obtained
     * using the {@link Projects#getNoOfCommit()} method.
     */
    IntField<Projects, Integer> NO_OF_COMMIT = IntField.create(
        Identifier.NO_OF_COMMIT,
        Projects::getNoOfCommit,
        Projects::setNoOfCommit,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Projects} field that can be obtained
     * using the {@link Projects#getNoOfReleases()} method.
     */
    ComparableField<Projects, Integer, Integer> NO_OF_RELEASES = ComparableField.create(
        Identifier.NO_OF_RELEASES,
        o -> OptionalUtil.unwrap(o.getNoOfReleases()),
        Projects::setNoOfReleases,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Projects. The id field corresponds to the database
     * column jaranalysis.jaranalysis.projects.Id.
     * 
     * @return the id of this Projects
     */
    int getId();
    
    /**
     * Returns the name of this Projects. The name field corresponds to the
     * database column jaranalysis.jaranalysis.projects.Name.
     * 
     * @return the name of this Projects
     */
    String getName();
    
    /**
     * Returns the gitCloneLink of this Projects. The gitCloneLink field
     * corresponds to the database column
     * jaranalysis.jaranalysis.projects.GitCloneLink.
     * 
     * @return the gitCloneLink of this Projects
     */
    String getGitCloneLink();
    
    /**
     * Returns the noOfCommit of this Projects. The noOfCommit field corresponds
     * to the database column jaranalysis.jaranalysis.projects.NoOfCommit.
     * 
     * @return the noOfCommit of this Projects
     */
    int getNoOfCommit();
    
    /**
     * Returns the noOfReleases of this Projects. The noOfReleases field
     * corresponds to the database column
     * jaranalysis.jaranalysis.projects.NoOfReleases.
     * 
     * @return the noOfReleases of this Projects
     */
    OptionalInt getNoOfReleases();
    
    /**
     * Sets the id of this Projects. The id field corresponds to the database
     * column jaranalysis.jaranalysis.projects.Id.
     * 
     * @param id to set of this Projects
     * @return   this Projects instance
     */
    Projects setId(int id);
    
    /**
     * Sets the name of this Projects. The name field corresponds to the
     * database column jaranalysis.jaranalysis.projects.Name.
     * 
     * @param name to set of this Projects
     * @return     this Projects instance
     */
    Projects setName(String name);
    
    /**
     * Sets the gitCloneLink of this Projects. The gitCloneLink field
     * corresponds to the database column
     * jaranalysis.jaranalysis.projects.GitCloneLink.
     * 
     * @param gitCloneLink to set of this Projects
     * @return             this Projects instance
     */
    Projects setGitCloneLink(String gitCloneLink);
    
    /**
     * Sets the noOfCommit of this Projects. The noOfCommit field corresponds to
     * the database column jaranalysis.jaranalysis.projects.NoOfCommit.
     * 
     * @param noOfCommit to set of this Projects
     * @return           this Projects instance
     */
    Projects setNoOfCommit(int noOfCommit);
    
    /**
     * Sets the noOfReleases of this Projects. The noOfReleases field
     * corresponds to the database column
     * jaranalysis.jaranalysis.projects.NoOfReleases.
     * 
     * @param noOfReleases to set of this Projects
     * @return             this Projects instance
     */
    Projects setNoOfReleases(Integer noOfReleases);
    
    enum Identifier implements ColumnIdentifier<Projects> {
        
        ID             ("Id"),
        NAME           ("Name"),
        GIT_CLONE_LINK ("GitCloneLink"),
        NO_OF_COMMIT   ("NoOfCommit"),
        NO_OF_RELEASES ("NoOfReleases");
        
        private final String columnId;
        private final TableIdentifier<Projects> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "jaranalysis";
        }
        
        @Override
        public String getSchemaId() {
            return "jaranalysis";
        }
        
        @Override
        public String getTableId() {
            return "projects";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Projects> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}