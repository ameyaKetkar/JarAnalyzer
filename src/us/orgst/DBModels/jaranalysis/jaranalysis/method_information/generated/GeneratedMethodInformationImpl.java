package us.orgst.DBModels.jaranalysis.jaranalysis.method_information.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import us.orgst.DBModels.jaranalysis.jaranalysis.class_information.ClassInformation;
import us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformation;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformation}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMethodInformationImpl implements MethodInformation {
    
    private long id;
    private long classId;
    private String name;
    private String returnType;
    private String accessModifiers;
    private boolean isAbstract;
    private boolean isStatic;
    private boolean isSynchronized;
    private boolean isConstructor;
    
    protected GeneratedMethodInformationImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getClassId() {
        return classId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public Optional<String> getReturnType() {
        return Optional.ofNullable(returnType);
    }
    
    @Override
    public String getAccessModifiers() {
        return accessModifiers;
    }
    
    @Override
    public boolean getIsAbstract() {
        return isAbstract;
    }
    
    @Override
    public boolean getIsStatic() {
        return isStatic;
    }
    
    @Override
    public boolean getIsSynchronized() {
        return isSynchronized;
    }
    
    @Override
    public boolean getIsConstructor() {
        return isConstructor;
    }
    
    @Override
    public MethodInformation setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public MethodInformation setClassId(long classId) {
        this.classId = classId;
        return this;
    }
    
    @Override
    public MethodInformation setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public MethodInformation setReturnType(String returnType) {
        this.returnType = returnType;
        return this;
    }
    
    @Override
    public MethodInformation setAccessModifiers(String accessModifiers) {
        this.accessModifiers = accessModifiers;
        return this;
    }
    
    @Override
    public MethodInformation setIsAbstract(boolean isAbstract) {
        this.isAbstract = isAbstract;
        return this;
    }
    
    @Override
    public MethodInformation setIsStatic(boolean isStatic) {
        this.isStatic = isStatic;
        return this;
    }
    
    @Override
    public MethodInformation setIsSynchronized(boolean isSynchronized) {
        this.isSynchronized = isSynchronized;
        return this;
    }
    
    @Override
    public MethodInformation setIsConstructor(boolean isConstructor) {
        this.isConstructor = isConstructor;
        return this;
    }
    
    @Override
    public ClassInformation findClassId(Manager<ClassInformation> foreignManager) {
        return foreignManager.stream().filter(ClassInformation.ID.equal(getClassId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "              + Objects.toString(getId()));
        sj.add("classId = "         + Objects.toString(getClassId()));
        sj.add("name = "            + Objects.toString(getName()));
        sj.add("returnType = "      + Objects.toString(OptionalUtil.unwrap(getReturnType())));
        sj.add("accessModifiers = " + Objects.toString(getAccessModifiers()));
        sj.add("isAbstract = "      + Objects.toString(getIsAbstract()));
        sj.add("isStatic = "        + Objects.toString(getIsStatic()));
        sj.add("isSynchronized = "  + Objects.toString(getIsSynchronized()));
        sj.add("isConstructor = "   + Objects.toString(getIsConstructor()));
        return "MethodInformationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof MethodInformation)) { return false; }
        final MethodInformation thatMethodInformation = (MethodInformation)that;
        if (this.getId() != thatMethodInformation.getId()) { return false; }
        if (this.getClassId() != thatMethodInformation.getClassId()) { return false; }
        if (!Objects.equals(this.getName(), thatMethodInformation.getName())) { return false; }
        if (!Objects.equals(this.getReturnType(), thatMethodInformation.getReturnType())) { return false; }
        if (!Objects.equals(this.getAccessModifiers(), thatMethodInformation.getAccessModifiers())) { return false; }
        if (this.getIsAbstract() != thatMethodInformation.getIsAbstract()) { return false; }
        if (this.getIsStatic() != thatMethodInformation.getIsStatic()) { return false; }
        if (this.getIsSynchronized() != thatMethodInformation.getIsSynchronized()) { return false; }
        if (this.getIsConstructor() != thatMethodInformation.getIsConstructor()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getClassId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getReturnType()));
        hash = 31 * hash + Objects.hashCode(getAccessModifiers());
        hash = 31 * hash + Boolean.hashCode(getIsAbstract());
        hash = 31 * hash + Boolean.hashCode(getIsStatic());
        hash = 31 * hash + Boolean.hashCode(getIsSynchronized());
        hash = 31 * hash + Boolean.hashCode(getIsConstructor());
        return hash;
    }
}