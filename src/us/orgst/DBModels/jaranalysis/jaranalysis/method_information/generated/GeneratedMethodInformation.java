package us.orgst.DBModels.jaranalysis.jaranalysis.method_information.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import us.orgst.DBModels.jaranalysis.jaranalysis.class_information.ClassInformation;
import us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformation;

import java.util.Optional;

/**
 * The generated base for the {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformation}-interface
 * representing entities of the {@code method_information}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMethodInformation {
    
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getId()} method.
     */
    LongField<MethodInformation, Long> ID = LongField.create(
        Identifier.ID,
        MethodInformation::getId,
        MethodInformation::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getClassId()} method.
     */
    LongForeignKeyField<MethodInformation, Long, ClassInformation> CLASS_ID = LongForeignKeyField.create(
        Identifier.CLASS_ID,
        MethodInformation::getClassId,
        MethodInformation::setClassId,
        ClassInformation.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getName()} method.
     */
    StringField<MethodInformation, String> NAME = StringField.create(
        Identifier.NAME,
        MethodInformation::getName,
        MethodInformation::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getReturnType()} method.
     */
    StringField<MethodInformation, String> RETURN_TYPE = StringField.create(
        Identifier.RETURN_TYPE,
        o -> OptionalUtil.unwrap(o.getReturnType()),
        MethodInformation::setReturnType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getAccessModifiers()} method.
     */
    StringField<MethodInformation, String> ACCESS_MODIFIERS = StringField.create(
        Identifier.ACCESS_MODIFIERS,
        MethodInformation::getAccessModifiers,
        MethodInformation::setAccessModifiers,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getIsAbstract()} method.
     */
    BooleanField<MethodInformation, Boolean> IS_ABSTRACT = BooleanField.create(
        Identifier.IS_ABSTRACT,
        MethodInformation::getIsAbstract,
        MethodInformation::setIsAbstract,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getIsStatic()} method.
     */
    BooleanField<MethodInformation, Boolean> IS_STATIC = BooleanField.create(
        Identifier.IS_STATIC,
        MethodInformation::getIsStatic,
        MethodInformation::setIsStatic,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getIsSynchronized()} method.
     */
    BooleanField<MethodInformation, Boolean> IS_SYNCHRONIZED = BooleanField.create(
        Identifier.IS_SYNCHRONIZED,
        MethodInformation::getIsSynchronized,
        MethodInformation::setIsSynchronized,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodInformation} field that can be
     * obtained using the {@link MethodInformation#getIsConstructor()} method.
     */
    BooleanField<MethodInformation, Boolean> IS_CONSTRUCTOR = BooleanField.create(
        Identifier.IS_CONSTRUCTOR,
        MethodInformation::getIsConstructor,
        MethodInformation::setIsConstructor,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the id of this MethodInformation. The id field corresponds to the
     * database column jaranalysis.jaranalysis.method_information.ID.
     * 
     * @return the id of this MethodInformation
     */
    long getId();
    
    /**
     * Returns the classId of this MethodInformation. The classId field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.ClassID.
     * 
     * @return the classId of this MethodInformation
     */
    long getClassId();
    
    /**
     * Returns the name of this MethodInformation. The name field corresponds to
     * the database column jaranalysis.jaranalysis.method_information.Name.
     * 
     * @return the name of this MethodInformation
     */
    String getName();
    
    /**
     * Returns the returnType of this MethodInformation. The returnType field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.ReturnType.
     * 
     * @return the returnType of this MethodInformation
     */
    Optional<String> getReturnType();
    
    /**
     * Returns the accessModifiers of this MethodInformation. The
     * accessModifiers field corresponds to the database column
     * jaranalysis.jaranalysis.method_information.AccessModifiers.
     * 
     * @return the accessModifiers of this MethodInformation
     */
    String getAccessModifiers();
    
    /**
     * Returns the isAbstract of this MethodInformation. The isAbstract field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isAbstract.
     * 
     * @return the isAbstract of this MethodInformation
     */
    boolean getIsAbstract();
    
    /**
     * Returns the isStatic of this MethodInformation. The isStatic field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isStatic.
     * 
     * @return the isStatic of this MethodInformation
     */
    boolean getIsStatic();
    
    /**
     * Returns the isSynchronized of this MethodInformation. The isSynchronized
     * field corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isSynchronized.
     * 
     * @return the isSynchronized of this MethodInformation
     */
    boolean getIsSynchronized();
    
    /**
     * Returns the isConstructor of this MethodInformation. The isConstructor
     * field corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isConstructor.
     * 
     * @return the isConstructor of this MethodInformation
     */
    boolean getIsConstructor();
    
    /**
     * Sets the id of this MethodInformation. The id field corresponds to the
     * database column jaranalysis.jaranalysis.method_information.ID.
     * 
     * @param id to set of this MethodInformation
     * @return   this MethodInformation instance
     */
    MethodInformation setId(long id);
    
    /**
     * Sets the classId of this MethodInformation. The classId field corresponds
     * to the database column
     * jaranalysis.jaranalysis.method_information.ClassID.
     * 
     * @param classId to set of this MethodInformation
     * @return        this MethodInformation instance
     */
    MethodInformation setClassId(long classId);
    
    /**
     * Sets the name of this MethodInformation. The name field corresponds to
     * the database column jaranalysis.jaranalysis.method_information.Name.
     * 
     * @param name to set of this MethodInformation
     * @return     this MethodInformation instance
     */
    MethodInformation setName(String name);
    
    /**
     * Sets the returnType of this MethodInformation. The returnType field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.ReturnType.
     * 
     * @param returnType to set of this MethodInformation
     * @return           this MethodInformation instance
     */
    MethodInformation setReturnType(String returnType);
    
    /**
     * Sets the accessModifiers of this MethodInformation. The accessModifiers
     * field corresponds to the database column
     * jaranalysis.jaranalysis.method_information.AccessModifiers.
     * 
     * @param accessModifiers to set of this MethodInformation
     * @return                this MethodInformation instance
     */
    MethodInformation setAccessModifiers(String accessModifiers);
    
    /**
     * Sets the isAbstract of this MethodInformation. The isAbstract field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isAbstract.
     * 
     * @param isAbstract to set of this MethodInformation
     * @return           this MethodInformation instance
     */
    MethodInformation setIsAbstract(boolean isAbstract);
    
    /**
     * Sets the isStatic of this MethodInformation. The isStatic field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isStatic.
     * 
     * @param isStatic to set of this MethodInformation
     * @return         this MethodInformation instance
     */
    MethodInformation setIsStatic(boolean isStatic);
    
    /**
     * Sets the isSynchronized of this MethodInformation. The isSynchronized
     * field corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isSynchronized.
     * 
     * @param isSynchronized to set of this MethodInformation
     * @return               this MethodInformation instance
     */
    MethodInformation setIsSynchronized(boolean isSynchronized);
    
    /**
     * Sets the isConstructor of this MethodInformation. The isConstructor field
     * corresponds to the database column
     * jaranalysis.jaranalysis.method_information.isConstructor.
     * 
     * @param isConstructor to set of this MethodInformation
     * @return              this MethodInformation instance
     */
    MethodInformation setIsConstructor(boolean isConstructor);
    
    /**
     * Queries the specified manager for the referenced ClassInformation. If no
     * such ClassInformation exists, an {@code NullPointerException} will be
     * thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    ClassInformation findClassId(Manager<ClassInformation> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MethodInformation> {
        
        ID               ("ID"),
        CLASS_ID         ("ClassID"),
        NAME             ("Name"),
        RETURN_TYPE      ("ReturnType"),
        ACCESS_MODIFIERS ("AccessModifiers"),
        IS_ABSTRACT      ("isAbstract"),
        IS_STATIC        ("isStatic"),
        IS_SYNCHRONIZED  ("isSynchronized"),
        IS_CONSTRUCTOR   ("isConstructor");
        
        private final String columnId;
        private final TableIdentifier<MethodInformation> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "jaranalysis";
        }
        
        @Override
        public String getSchemaId() {
            return "jaranalysis";
        }
        
        @Override
        public String getTableId() {
            return "method_information";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MethodInformation> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}