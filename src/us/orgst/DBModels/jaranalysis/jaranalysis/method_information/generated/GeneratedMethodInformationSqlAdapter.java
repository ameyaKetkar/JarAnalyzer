package us.orgst.DBModels.jaranalysis.jaranalysis.method_information.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformation;
import us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformationImpl;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.method_information.MethodInformation}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMethodInformationSqlAdapter implements SqlAdapter<MethodInformation> {
    
    private final TableIdentifier<MethodInformation> tableIdentifier;
    
    protected GeneratedMethodInformationSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("jaranalysis", "jaranalysis", "method_information");
    }
    
    protected MethodInformation apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(              resultSet.getLong(1 + offset))
            .setClassId(         resultSet.getLong(2 + offset))
            .setName(            resultSet.getString(3 + offset))
            .setReturnType(      resultSet.getString(4 + offset))
            .setAccessModifiers( resultSet.getString(5 + offset))
            .setIsAbstract(      resultSet.getBoolean(6 + offset))
            .setIsStatic(        resultSet.getBoolean(7 + offset))
            .setIsSynchronized(  resultSet.getBoolean(8 + offset))
            .setIsConstructor(   resultSet.getBoolean(9 + offset))
            ;
    }
    
    protected MethodInformationImpl createEntity() {
        return new MethodInformationImpl();
    }
    
    @Override
    public TableIdentifier<MethodInformation> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, MethodInformation> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, MethodInformation> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}