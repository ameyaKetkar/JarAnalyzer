package us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.OptionalBoolean;
import com.speedment.runtime.core.util.OptionalUtil;
import us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.JarInformation;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.JarInformation}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedJarInformationImpl implements JarInformation {
    
    private int id;
    private String artifactId;
    private String groupId;
    private String version;
    private Boolean couldFetch;
    
    protected GeneratedJarInformationImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getArtifactId() {
        return artifactId;
    }
    
    @Override
    public String getGroupId() {
        return groupId;
    }
    
    @Override
    public String getVersion() {
        return version;
    }
    
    @Override
    public OptionalBoolean getCouldFetch() {
        return OptionalUtil.ofNullable(couldFetch);
    }
    
    @Override
    public JarInformation setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public JarInformation setArtifactId(String artifactId) {
        this.artifactId = artifactId;
        return this;
    }
    
    @Override
    public JarInformation setGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }
    
    @Override
    public JarInformation setVersion(String version) {
        this.version = version;
        return this;
    }
    
    @Override
    public JarInformation setCouldFetch(Boolean couldFetch) {
        this.couldFetch = couldFetch;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("artifactId = " + Objects.toString(getArtifactId()));
        sj.add("groupId = "    + Objects.toString(getGroupId()));
        sj.add("version = "    + Objects.toString(getVersion()));
        sj.add("couldFetch = " + Objects.toString(OptionalUtil.unwrap(getCouldFetch())));
        return "JarInformationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof JarInformation)) { return false; }
        final JarInformation thatJarInformation = (JarInformation)that;
        if (this.getId() != thatJarInformation.getId()) { return false; }
        if (!Objects.equals(this.getArtifactId(), thatJarInformation.getArtifactId())) { return false; }
        if (!Objects.equals(this.getGroupId(), thatJarInformation.getGroupId())) { return false; }
        if (!Objects.equals(this.getVersion(), thatJarInformation.getVersion())) { return false; }
        if (!Objects.equals(this.getCouldFetch(), thatJarInformation.getCouldFetch())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getArtifactId());
        hash = 31 * hash + Objects.hashCode(getGroupId());
        hash = 31 * hash + Objects.hashCode(getVersion());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCouldFetch()));
        return hash;
    }
}