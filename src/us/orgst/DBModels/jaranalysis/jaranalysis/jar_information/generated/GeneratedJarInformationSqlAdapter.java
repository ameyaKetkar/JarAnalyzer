package us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.JarInformation;
import us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.JarInformationImpl;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.jar_information.JarInformation}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedJarInformationSqlAdapter implements SqlAdapter<JarInformation> {
    
    private final TableIdentifier<JarInformation> tableIdentifier;
    
    protected GeneratedJarInformationSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("jaranalysis", "jaranalysis", "jar_information");
    }
    
    protected JarInformation apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(         resultSet.getInt(1 + offset))
            .setArtifactId( resultSet.getString(2 + offset))
            .setGroupId(    resultSet.getString(3 + offset))
            .setVersion(    resultSet.getString(4 + offset))
            .setCouldFetch( getBoolean(resultSet, 5 + offset))
            ;
    }
    
    protected JarInformationImpl createEntity() {
        return new JarInformationImpl();
    }
    
    @Override
    public TableIdentifier<JarInformation> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, JarInformation> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, JarInformation> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}