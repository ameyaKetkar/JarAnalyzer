package us.orgst.DBModels.jaranalysis.jaranalysis.field_information.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import us.orgst.DBModels.jaranalysis.jaranalysis.class_information.ClassInformation;
import us.orgst.DBModels.jaranalysis.jaranalysis.field_information.FieldInformation;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * us.orgst.DBModels.jaranalysis.jaranalysis.field_information.FieldInformation}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedFieldInformationImpl implements FieldInformation {
    
    private int id;
    private long classId;
    private String type;
    private String accessModifier;
    private boolean isStatic;
    private String name;
    
    protected GeneratedFieldInformationImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public long getClassId() {
        return classId;
    }
    
    @Override
    public String getType() {
        return type;
    }
    
    @Override
    public String getAccessModifier() {
        return accessModifier;
    }
    
    @Override
    public boolean getIsStatic() {
        return isStatic;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public FieldInformation setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public FieldInformation setClassId(long classId) {
        this.classId = classId;
        return this;
    }
    
    @Override
    public FieldInformation setType(String type) {
        this.type = type;
        return this;
    }
    
    @Override
    public FieldInformation setAccessModifier(String accessModifier) {
        this.accessModifier = accessModifier;
        return this;
    }
    
    @Override
    public FieldInformation setIsStatic(boolean isStatic) {
        this.isStatic = isStatic;
        return this;
    }
    
    @Override
    public FieldInformation setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public ClassInformation findClassId(Manager<ClassInformation> foreignManager) {
        return foreignManager.stream().filter(ClassInformation.ID.equal(getClassId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "             + Objects.toString(getId()));
        sj.add("classId = "        + Objects.toString(getClassId()));
        sj.add("type = "           + Objects.toString(getType()));
        sj.add("accessModifier = " + Objects.toString(getAccessModifier()));
        sj.add("isStatic = "       + Objects.toString(getIsStatic()));
        sj.add("name = "           + Objects.toString(getName()));
        return "FieldInformationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof FieldInformation)) { return false; }
        final FieldInformation thatFieldInformation = (FieldInformation)that;
        if (this.getId() != thatFieldInformation.getId()) { return false; }
        if (this.getClassId() != thatFieldInformation.getClassId()) { return false; }
        if (!Objects.equals(this.getType(), thatFieldInformation.getType())) { return false; }
        if (!Objects.equals(this.getAccessModifier(), thatFieldInformation.getAccessModifier())) { return false; }
        if (this.getIsStatic() != thatFieldInformation.getIsStatic()) { return false; }
        if (!Objects.equals(this.getName(), thatFieldInformation.getName())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getClassId());
        hash = 31 * hash + Objects.hashCode(getType());
        hash = 31 * hash + Objects.hashCode(getAccessModifier());
        hash = 31 * hash + Boolean.hashCode(getIsStatic());
        hash = 31 * hash + Objects.hashCode(getName());
        return hash;
    }
}