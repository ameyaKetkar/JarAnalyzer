package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.Commits;
import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.CommitsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.Commits}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCommitsSqlAdapter implements SqlAdapter<Commits> {
    
    private final TableIdentifier<Commits> tableIdentifier;
    
    protected GeneratedCommitsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("JarAnalysis", "JarAnalysis", "Commits");
    }
    
    protected Commits apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setSha(           resultSet.getString(1 + offset))
            .setTime(          resultSet.getTimestamp(2 + offset))
            .setFilesAdded(    getInt(resultSet, 3 + offset))
            .setFilesRemoved(  getInt(resultSet, 4 + offset))
            .setFilesModified( getInt(resultSet, 5 + offset))
            .setTag(           resultSet.getString(6 + offset))
            .setIsRelease(     resultSet.getString(7 + offset))
            .setProjectId(     resultSet.getInt(8 + offset))
            .setContainsJava(  getBoolean(resultSet, 9 + offset))
            .setCouldCheckout( getBoolean(resultSet, 10 + offset))
            .setEffectivePom(  getBoolean(resultSet, 11 + offset))
            ;
    }
    
    protected CommitsImpl createEntity() {
        return new CommitsImpl();
    }
    
    @Override
    public TableIdentifier<Commits> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Commits> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Commits> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}