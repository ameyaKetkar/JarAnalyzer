package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.Commits;
import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.projects.Projects;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.OptionalBoolean;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commits.Commits}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCommitsImpl implements Commits {
    
    private String sha;
    private Timestamp time;
    private Integer filesAdded;
    private Integer filesRemoved;
    private Integer filesModified;
    private String tag;
    private String isRelease;
    private int projectId;
    private Boolean containsJava;
    private Boolean couldCheckout;
    private Boolean effectivePom;
    
    protected GeneratedCommitsImpl() {}
    
    @Override
    public String getSha() {
        return sha;
    }
    
    @Override
    public Timestamp getTime() {
        return time;
    }
    
    @Override
    public OptionalInt getFilesAdded() {
        return OptionalUtil.ofNullable(filesAdded);
    }
    
    @Override
    public OptionalInt getFilesRemoved() {
        return OptionalUtil.ofNullable(filesRemoved);
    }
    
    @Override
    public OptionalInt getFilesModified() {
        return OptionalUtil.ofNullable(filesModified);
    }
    
    @Override
    public Optional<String> getTag() {
        return Optional.ofNullable(tag);
    }
    
    @Override
    public Optional<String> getIsRelease() {
        return Optional.ofNullable(isRelease);
    }
    
    @Override
    public int getProjectId() {
        return projectId;
    }
    
    @Override
    public OptionalBoolean getContainsJava() {
        return OptionalUtil.ofNullable(containsJava);
    }
    
    @Override
    public OptionalBoolean getCouldCheckout() {
        return OptionalUtil.ofNullable(couldCheckout);
    }
    
    @Override
    public OptionalBoolean getEffectivePom() {
        return OptionalUtil.ofNullable(effectivePom);
    }
    
    @Override
    public Commits setSha(String sha) {
        this.sha = sha;
        return this;
    }
    
    @Override
    public Commits setTime(Timestamp time) {
        this.time = time;
        return this;
    }
    
    @Override
    public Commits setFilesAdded(Integer filesAdded) {
        this.filesAdded = filesAdded;
        return this;
    }
    
    @Override
    public Commits setFilesRemoved(Integer filesRemoved) {
        this.filesRemoved = filesRemoved;
        return this;
    }
    
    @Override
    public Commits setFilesModified(Integer filesModified) {
        this.filesModified = filesModified;
        return this;
    }
    
    @Override
    public Commits setTag(String tag) {
        this.tag = tag;
        return this;
    }
    
    @Override
    public Commits setIsRelease(String isRelease) {
        this.isRelease = isRelease;
        return this;
    }
    
    @Override
    public Commits setProjectId(int projectId) {
        this.projectId = projectId;
        return this;
    }
    
    @Override
    public Commits setContainsJava(Boolean containsJava) {
        this.containsJava = containsJava;
        return this;
    }
    
    @Override
    public Commits setCouldCheckout(Boolean couldCheckout) {
        this.couldCheckout = couldCheckout;
        return this;
    }
    
    @Override
    public Commits setEffectivePom(Boolean effectivePom) {
        this.effectivePom = effectivePom;
        return this;
    }
    
    @Override
    public Projects findProjectId(Manager<Projects> foreignManager) {
        return foreignManager.stream().filter(Projects.ID.equal(getProjectId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("sha = "           + Objects.toString(getSha()));
        sj.add("time = "          + Objects.toString(getTime()));
        sj.add("filesAdded = "    + Objects.toString(OptionalUtil.unwrap(getFilesAdded())));
        sj.add("filesRemoved = "  + Objects.toString(OptionalUtil.unwrap(getFilesRemoved())));
        sj.add("filesModified = " + Objects.toString(OptionalUtil.unwrap(getFilesModified())));
        sj.add("tag = "           + Objects.toString(OptionalUtil.unwrap(getTag())));
        sj.add("isRelease = "     + Objects.toString(OptionalUtil.unwrap(getIsRelease())));
        sj.add("projectId = "     + Objects.toString(getProjectId()));
        sj.add("containsJava = "  + Objects.toString(OptionalUtil.unwrap(getContainsJava())));
        sj.add("couldCheckout = " + Objects.toString(OptionalUtil.unwrap(getCouldCheckout())));
        sj.add("effectivePom = "  + Objects.toString(OptionalUtil.unwrap(getEffectivePom())));
        return "CommitsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Commits)) { return false; }
        final Commits thatCommits = (Commits)that;
        if (!Objects.equals(this.getSha(), thatCommits.getSha())) { return false; }
        if (!Objects.equals(this.getTime(), thatCommits.getTime())) { return false; }
        if (!Objects.equals(this.getFilesAdded(), thatCommits.getFilesAdded())) { return false; }
        if (!Objects.equals(this.getFilesRemoved(), thatCommits.getFilesRemoved())) { return false; }
        if (!Objects.equals(this.getFilesModified(), thatCommits.getFilesModified())) { return false; }
        if (!Objects.equals(this.getTag(), thatCommits.getTag())) { return false; }
        if (!Objects.equals(this.getIsRelease(), thatCommits.getIsRelease())) { return false; }
        if (this.getProjectId() != thatCommits.getProjectId()) { return false; }
        if (!Objects.equals(this.getContainsJava(), thatCommits.getContainsJava())) { return false; }
        if (!Objects.equals(this.getCouldCheckout(), thatCommits.getCouldCheckout())) { return false; }
        if (!Objects.equals(this.getEffectivePom(), thatCommits.getEffectivePom())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getSha());
        hash = 31 * hash + Objects.hashCode(getTime());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFilesAdded()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFilesRemoved()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFilesModified()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTag()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getIsRelease()));
        hash = 31 * hash + Integer.hashCode(getProjectId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getContainsJava()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getCouldCheckout()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEffectivePom()));
        return hash;
    }
}