package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.classinformation.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.classinformation.ClassInformation;
import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.packageinformation.PackageInformation;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.OptionalLong;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.classinformation.ClassInformation}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedClassInformationImpl implements ClassInformation {
    
    private long id;
    private long packageId;
    private String name;
    private String qualifiedName;
    private String type;
    private String accessModifiers;
    private Long superClassId;
    private Long superInterfaceId;
    private boolean isInterface;
    private boolean isAbstract;
    
    protected GeneratedClassInformationImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getPackageId() {
        return packageId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getQualifiedName() {
        return qualifiedName;
    }
    
    @Override
    public String getType() {
        return type;
    }
    
    @Override
    public String getAccessModifiers() {
        return accessModifiers;
    }
    
    @Override
    public OptionalLong getSuperClassId() {
        return OptionalUtil.ofNullable(superClassId);
    }
    
    @Override
    public OptionalLong getSuperInterfaceId() {
        return OptionalUtil.ofNullable(superInterfaceId);
    }
    
    @Override
    public boolean getIsInterface() {
        return isInterface;
    }
    
    @Override
    public boolean getIsAbstract() {
        return isAbstract;
    }
    
    @Override
    public ClassInformation setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public ClassInformation setPackageId(long packageId) {
        this.packageId = packageId;
        return this;
    }
    
    @Override
    public ClassInformation setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public ClassInformation setQualifiedName(String qualifiedName) {
        this.qualifiedName = qualifiedName;
        return this;
    }
    
    @Override
    public ClassInformation setType(String type) {
        this.type = type;
        return this;
    }
    
    @Override
    public ClassInformation setAccessModifiers(String accessModifiers) {
        this.accessModifiers = accessModifiers;
        return this;
    }
    
    @Override
    public ClassInformation setSuperClassId(Long superClassId) {
        this.superClassId = superClassId;
        return this;
    }
    
    @Override
    public ClassInformation setSuperInterfaceId(Long superInterfaceId) {
        this.superInterfaceId = superInterfaceId;
        return this;
    }
    
    @Override
    public ClassInformation setIsInterface(boolean isInterface) {
        this.isInterface = isInterface;
        return this;
    }
    
    @Override
    public ClassInformation setIsAbstract(boolean isAbstract) {
        this.isAbstract = isAbstract;
        return this;
    }
    
    @Override
    public PackageInformation findPackageId(Manager<PackageInformation> foreignManager) {
        return foreignManager.stream().filter(PackageInformation.ID.equal(getPackageId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "               + Objects.toString(getId()));
        sj.add("packageId = "        + Objects.toString(getPackageId()));
        sj.add("name = "             + Objects.toString(getName()));
        sj.add("qualifiedName = "    + Objects.toString(getQualifiedName()));
        sj.add("type = "             + Objects.toString(getType()));
        sj.add("accessModifiers = "  + Objects.toString(getAccessModifiers()));
        sj.add("superClassId = "     + Objects.toString(OptionalUtil.unwrap(getSuperClassId())));
        sj.add("superInterfaceId = " + Objects.toString(OptionalUtil.unwrap(getSuperInterfaceId())));
        sj.add("isInterface = "      + Objects.toString(getIsInterface()));
        sj.add("isAbstract = "       + Objects.toString(getIsAbstract()));
        return "ClassInformationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof ClassInformation)) { return false; }
        final ClassInformation thatClassInformation = (ClassInformation)that;
        if (this.getId() != thatClassInformation.getId()) { return false; }
        if (this.getPackageId() != thatClassInformation.getPackageId()) { return false; }
        if (!Objects.equals(this.getName(), thatClassInformation.getName())) { return false; }
        if (!Objects.equals(this.getQualifiedName(), thatClassInformation.getQualifiedName())) { return false; }
        if (!Objects.equals(this.getType(), thatClassInformation.getType())) { return false; }
        if (!Objects.equals(this.getAccessModifiers(), thatClassInformation.getAccessModifiers())) { return false; }
        if (!Objects.equals(this.getSuperClassId(), thatClassInformation.getSuperClassId())) { return false; }
        if (!Objects.equals(this.getSuperInterfaceId(), thatClassInformation.getSuperInterfaceId())) { return false; }
        if (this.getIsInterface() != thatClassInformation.getIsInterface()) { return false; }
        if (this.getIsAbstract() != thatClassInformation.getIsAbstract()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getPackageId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getQualifiedName());
        hash = 31 * hash + Objects.hashCode(getType());
        hash = 31 * hash + Objects.hashCode(getAccessModifiers());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSuperClassId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSuperInterfaceId()));
        hash = 31 * hash + Boolean.hashCode(getIsInterface());
        hash = 31 * hash + Boolean.hashCode(getIsAbstract());
        return hash;
    }
}