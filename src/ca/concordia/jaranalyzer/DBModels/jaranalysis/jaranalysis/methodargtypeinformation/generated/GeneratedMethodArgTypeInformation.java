package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.methodargtypeinformation.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.methodargtypeinformation.MethodArgTypeInformation;
import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.methodinformation.MethodInformation;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalLong;

/**
 * The generated base for the {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.methodargtypeinformation.MethodArgTypeInformation}-interface
 * representing entities of the {@code MethodArgTypeInformation}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMethodArgTypeInformation {
    
    /**
     * This Field corresponds to the {@link MethodArgTypeInformation} field that
     * can be obtained using the {@link MethodArgTypeInformation#getMethodId()}
     * method.
     */
    ComparableForeignKeyField<MethodArgTypeInformation, Long, Long, MethodInformation> METHOD_ID = ComparableForeignKeyField.create(
        Identifier.METHOD_ID,
        o -> OptionalUtil.unwrap(o.getMethodId()),
        MethodArgTypeInformation::setMethodId,
        MethodInformation.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MethodArgTypeInformation} field that
     * can be obtained using the {@link MethodArgTypeInformation#getType()}
     * method.
     */
    StringField<MethodArgTypeInformation, String> TYPE = StringField.create(
        Identifier.TYPE,
        o -> OptionalUtil.unwrap(o.getType()),
        MethodArgTypeInformation::setType,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the methodId of this MethodArgTypeInformation. The methodId field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.MethodArgTypeInformation.MethodID.
     * 
     * @return the methodId of this MethodArgTypeInformation
     */
    OptionalLong getMethodId();
    
    /**
     * Returns the type of this MethodArgTypeInformation. The type field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.MethodArgTypeInformation.Type.
     * 
     * @return the type of this MethodArgTypeInformation
     */
    Optional<String> getType();
    
    /**
     * Sets the methodId of this MethodArgTypeInformation. The methodId field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.MethodArgTypeInformation.MethodID.
     * 
     * @param methodId to set of this MethodArgTypeInformation
     * @return         this MethodArgTypeInformation instance
     */
    MethodArgTypeInformation setMethodId(Long methodId);
    
    /**
     * Sets the type of this MethodArgTypeInformation. The type field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.MethodArgTypeInformation.Type.
     * 
     * @param type to set of this MethodArgTypeInformation
     * @return     this MethodArgTypeInformation instance
     */
    MethodArgTypeInformation setType(String type);
    
    /**
     * Queries the specified manager for the referenced MethodInformation. If no
     * such MethodInformation exists, an {@code NullPointerException} will be
     * thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<MethodInformation> findMethodId(Manager<MethodInformation> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MethodArgTypeInformation> {
        
        METHOD_ID ("MethodID"),
        TYPE      ("Type");
        
        private final String columnId;
        private final TableIdentifier<MethodArgTypeInformation> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "JarAnalysis";
        }
        
        @Override
        public String getSchemaId() {
            return "JarAnalysis";
        }
        
        @Override
        public String getTableId() {
            return "MethodArgTypeInformation";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MethodArgTypeInformation> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}