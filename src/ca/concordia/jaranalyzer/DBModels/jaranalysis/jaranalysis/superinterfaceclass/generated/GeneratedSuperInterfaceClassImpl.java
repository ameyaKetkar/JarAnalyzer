package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.superinterfaceclass.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.superinterfaceclass.SuperInterfaceClass;
import com.speedment.common.annotation.GeneratedCode;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.superinterfaceclass.SuperInterfaceClass}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSuperInterfaceClassImpl implements SuperInterfaceClass {
    
    private long classId;
    private String superInterface;
    
    protected GeneratedSuperInterfaceClassImpl() {}
    
    @Override
    public long getClassId() {
        return classId;
    }
    
    @Override
    public String getSuperInterface() {
        return superInterface;
    }
    
    @Override
    public SuperInterfaceClass setClassId(long classId) {
        this.classId = classId;
        return this;
    }
    
    @Override
    public SuperInterfaceClass setSuperInterface(String superInterface) {
        this.superInterface = superInterface;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("classId = "        + Objects.toString(getClassId()));
        sj.add("superInterface = " + Objects.toString(getSuperInterface()));
        return "SuperInterfaceClassImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof SuperInterfaceClass)) { return false; }
        final SuperInterfaceClass thatSuperInterfaceClass = (SuperInterfaceClass)that;
        if (this.getClassId() != thatSuperInterfaceClass.getClassId()) { return false; }
        if (!Objects.equals(this.getSuperInterface(), thatSuperInterfaceClass.getSuperInterface())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getClassId());
        hash = 31 * hash + Objects.hashCode(getSuperInterface());
        return hash;
    }
}