package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commitseffectivepom.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commitseffectivepom.CommitsEffectivePom;
import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commitseffectivepom.CommitsEffectivePomImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.commitseffectivepom.CommitsEffectivePom}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCommitsEffectivePomSqlAdapter implements SqlAdapter<CommitsEffectivePom> {
    
    private final TableIdentifier<CommitsEffectivePom> tableIdentifier;
    
    protected GeneratedCommitsEffectivePomSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("JarAnalysis", "JarAnalysis", "CommitsEffectivePom");
    }
    
    protected CommitsEffectivePom apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setSha(          resultSet.getString(1 + offset))
            .setEffectivePom( resultSet.getBoolean(2 + offset))
            ;
    }
    
    protected CommitsEffectivePomImpl createEntity() {
        return new CommitsEffectivePomImpl();
    }
    
    @Override
    public TableIdentifier<CommitsEffectivePom> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, CommitsEffectivePom> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, CommitsEffectivePom> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}