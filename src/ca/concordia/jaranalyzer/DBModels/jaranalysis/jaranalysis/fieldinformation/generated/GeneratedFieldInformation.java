package ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.fieldinformation.generated;

import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.classinformation.ClassInformation;
import ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.fieldinformation.FieldInformation;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.LongForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * ca.concordia.jaranalyzer.DBModels.jaranalysis.jaranalysis.fieldinformation.FieldInformation}-interface
 * representing entities of the {@code FieldInformation}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedFieldInformation {
    
    /**
     * This Field corresponds to the {@link FieldInformation} field that can be
     * obtained using the {@link FieldInformation#getId()} method.
     */
    IntField<FieldInformation, Integer> ID = IntField.create(
        Identifier.ID,
        FieldInformation::getId,
        FieldInformation::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link FieldInformation} field that can be
     * obtained using the {@link FieldInformation#getClassId()} method.
     */
    LongForeignKeyField<FieldInformation, Long, ClassInformation> CLASS_ID = LongForeignKeyField.create(
        Identifier.CLASS_ID,
        FieldInformation::getClassId,
        FieldInformation::setClassId,
        ClassInformation.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link FieldInformation} field that can be
     * obtained using the {@link FieldInformation#getType()} method.
     */
    StringField<FieldInformation, String> TYPE = StringField.create(
        Identifier.TYPE,
        FieldInformation::getType,
        FieldInformation::setType,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link FieldInformation} field that can be
     * obtained using the {@link FieldInformation#getAccessModifier()} method.
     */
    StringField<FieldInformation, String> ACCESS_MODIFIER = StringField.create(
        Identifier.ACCESS_MODIFIER,
        FieldInformation::getAccessModifier,
        FieldInformation::setAccessModifier,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link FieldInformation} field that can be
     * obtained using the {@link FieldInformation#getIsStatic()} method.
     */
    BooleanField<FieldInformation, Boolean> IS_STATIC = BooleanField.create(
        Identifier.IS_STATIC,
        FieldInformation::getIsStatic,
        FieldInformation::setIsStatic,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the id of this FieldInformation. The id field corresponds to the
     * database column JarAnalysis.JarAnalysis.FieldInformation.ID.
     * 
     * @return the id of this FieldInformation
     */
    int getId();
    
    /**
     * Returns the classId of this FieldInformation. The classId field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.FieldInformation.ClassID.
     * 
     * @return the classId of this FieldInformation
     */
    long getClassId();
    
    /**
     * Returns the type of this FieldInformation. The type field corresponds to
     * the database column JarAnalysis.JarAnalysis.FieldInformation.Type.
     * 
     * @return the type of this FieldInformation
     */
    String getType();
    
    /**
     * Returns the accessModifier of this FieldInformation. The accessModifier
     * field corresponds to the database column
     * JarAnalysis.JarAnalysis.FieldInformation.AccessModifier.
     * 
     * @return the accessModifier of this FieldInformation
     */
    String getAccessModifier();
    
    /**
     * Returns the isStatic of this FieldInformation. The isStatic field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.FieldInformation.isStatic.
     * 
     * @return the isStatic of this FieldInformation
     */
    boolean getIsStatic();
    
    /**
     * Sets the id of this FieldInformation. The id field corresponds to the
     * database column JarAnalysis.JarAnalysis.FieldInformation.ID.
     * 
     * @param id to set of this FieldInformation
     * @return   this FieldInformation instance
     */
    FieldInformation setId(int id);
    
    /**
     * Sets the classId of this FieldInformation. The classId field corresponds
     * to the database column JarAnalysis.JarAnalysis.FieldInformation.ClassID.
     * 
     * @param classId to set of this FieldInformation
     * @return        this FieldInformation instance
     */
    FieldInformation setClassId(long classId);
    
    /**
     * Sets the type of this FieldInformation. The type field corresponds to the
     * database column JarAnalysis.JarAnalysis.FieldInformation.Type.
     * 
     * @param type to set of this FieldInformation
     * @return     this FieldInformation instance
     */
    FieldInformation setType(String type);
    
    /**
     * Sets the accessModifier of this FieldInformation. The accessModifier
     * field corresponds to the database column
     * JarAnalysis.JarAnalysis.FieldInformation.AccessModifier.
     * 
     * @param accessModifier to set of this FieldInformation
     * @return               this FieldInformation instance
     */
    FieldInformation setAccessModifier(String accessModifier);
    
    /**
     * Sets the isStatic of this FieldInformation. The isStatic field
     * corresponds to the database column
     * JarAnalysis.JarAnalysis.FieldInformation.isStatic.
     * 
     * @param isStatic to set of this FieldInformation
     * @return         this FieldInformation instance
     */
    FieldInformation setIsStatic(boolean isStatic);
    
    /**
     * Queries the specified manager for the referenced ClassInformation. If no
     * such ClassInformation exists, an {@code NullPointerException} will be
     * thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    ClassInformation findClassId(Manager<ClassInformation> foreignManager);
    
    enum Identifier implements ColumnIdentifier<FieldInformation> {
        
        ID              ("ID"),
        CLASS_ID        ("ClassID"),
        TYPE            ("Type"),
        ACCESS_MODIFIER ("AccessModifier"),
        IS_STATIC       ("isStatic");
        
        private final String columnId;
        private final TableIdentifier<FieldInformation> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "JarAnalysis";
        }
        
        @Override
        public String getSchemaId() {
            return "JarAnalysis";
        }
        
        @Override
        public String getTableId() {
            return "FieldInformation";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<FieldInformation> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}